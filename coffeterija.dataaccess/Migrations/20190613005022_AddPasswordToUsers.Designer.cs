// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using coffeterija.dataaccess;

namespace coffeterija.dataaccess.Migrations
{
    [DbContext(typeof(CoffeeContext))]
    [Migration("20190613005022_AddPasswordToUsers")]
    partial class AddPasswordToUsers
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.2-rtm-30932")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("coffeterija.Coffee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CountryId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Coffees");
                });

            modelBuilder.Entity("coffeterija.CoffeePrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CoffeeId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<float>("Price");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("CoffeeId");

                    b.ToTable("CoffePrices");
                });

            modelBuilder.Entity("coffeterija.Continent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Continents");
                });

            modelBuilder.Entity("coffeterija.Favorites", b =>
                {
                    b.Property<int>("CoffeeId");

                    b.Property<int>("UserId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("CoffeeId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("coffeterija.OriginCountry", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ContinentId");

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.HasIndex("ContinentId");

                    b.ToTable("OriginCountries");
                });

            modelBuilder.Entity("coffeterija.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedAt");

                    b.Property<DateTime?>("DeletedAt");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<DateTime>("UpdatedAt");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("coffeterija.Coffee", b =>
                {
                    b.HasOne("coffeterija.OriginCountry", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("coffeterija.CoffeePrice", b =>
                {
                    b.HasOne("coffeterija.Coffee")
                        .WithMany("Prices")
                        .HasForeignKey("CoffeeId");
                });

            modelBuilder.Entity("coffeterija.Favorites", b =>
                {
                    b.HasOne("coffeterija.Coffee", "Coffee")
                        .WithMany("Favorites")
                        .HasForeignKey("CoffeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("coffeterija.User", "User")
                        .WithMany("Favorites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("coffeterija.OriginCountry", b =>
                {
                    b.HasOne("coffeterija.Continent", "Continent")
                        .WithMany()
                        .HasForeignKey("ContinentId");
                });
#pragma warning restore 612, 618
        }
    }
}
